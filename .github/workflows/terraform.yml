# This workflow installs and configures Terraform CLI version 1.0.0.
# On pull request to main/dev/test this will run terraform init, fmt, validate and plan.
# On push event to main/dev/test this will run terraform apply
# Documentation for `hashicorp/setup-terraform` is located here: https://github.com/hashicorp/setup-terraform
# Documentation for  `aws-actions/configure-aws-credentials` is located here: https://github.com/aws-actions/configure-aws-credentials

name: 'aais openidl-IaaC pipeline v1.0'
on:
  push:
    branches:
      - master
      - dev
      - test
    paths-ignore:
      - 'tf_backend_setup/**'
      - 'github_actions_backup/**'
  pull_request:
    branches:
      - master
      - dev
      - test
    paths-ignore:
      - 'tf_backend_setup/**'
      - 'github_actions_backup/**'
jobs:
  app_cluster:
    name: 'application_cluster'
    runs-on: ubuntu-latest
    env:
      TF_VAR_aws_core_account_number: ${{ secrets.aws_core_account_number }}
      TF_VAR_aws_secondary_account_number: ${{ secrets.aws_secondary_account_number }}
      TF_VAR_aws_role_arn: ${{ secrets.aws_role_arn }}
      TF_VAR_aws_user_arn: ${{ secrets.aws_user_arn }}
      TF_VAR_ec2_ssh_public_key: ${{ secrets.ec2_ssh_public_key }}
      #destroy_env: ${{ secrets.destroy_env }}

    #default bash shell and working directory is set
    defaults:
      run:
        shell: bash

    steps:
    # Option:1 Configuring aws cli utilizing secrets from GIT SECRETS
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@230d25f14e841bc8e06b5f4ff89ccd6989fc1d71
      with:
        aws-access-key-id: ${{ secrets.access_key }}
        aws-secret-access-key: ${{ secrets.secret_key }}
        aws-region: ${{ secrets.region }}
        role-to-assume: ${{ secrets.aws_role_arn }}
        role-external-id: ${{ secrets.external_id }}
        role-duration-seconds: 1800 # session valid for 30 minutes
        role-session-name: terraform-session

    # Checkout the repository to the GitHub Actions runner
    - name: Checkout Code
      uses: actions/checkout@5a4ac9002d0be2fb38bd78e4b4dbde5606d7042f

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@a504130155a42639c3c62d0fafc9ff047dcfdb8b
      with:
        terraform_version: 1.0.0
        terraform_wrapper: true

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      id: format
      run: terraform fmt -recursive
      #continue-on-error: true

    ## Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      id: init
      run: terraform init -backend-config=tf_backends/s3_backend

    # Sets up terraform workspace
    - name: Terraform Workspace if push event
      id: workspace-push
      if: github.event_name == 'push'
      run: terraform workspace new ${GITHUB_REF##*/} || terraform workspace select ${GITHUB_REF##*/}

    - name: Terraform Workspace if pull event
      id: workspace-pull
      if: github.event_name == 'pull_request'
      run: terraform workspace new ${{github.base_ref}} || terraform workspace select ${{github.base_ref}}-app-cluster

    # Checks that all Terraform configuration files adhere for syntax
    - name: Terraform Syntax
      id: validate
      run: terraform validate -no-color -json
      #continue-on-error: true

    # Generates an execution plan for Terraform
    #- name: Terraform Plan
    #  id: plan
    #  if: github.event_name == 'pull_request' || github.event_name == 'push'
    #  run: terraform plan -out=plan.out && terraform show -json plan.out > plan.out.json
    #  continue-on-error: true

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      id: plan
      if: github.event_name == 'pull_request'
    # env:
      run: terraform plan -var-file=aais_clusters.tfvars -out=plan.out && terraform show -json plan.out > plan.out.json
      continue-on-error: true

    - name: Terraform Plan Status
      if: steps.plan.outcome == 'failure'
      run: exit 1

    # On push to main, build or change infrastructure according to Terraform configuration files
    # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      id: apply
      if: ((github.ref == 'refs/heads/main' || github.ref == 'refs/heads/test' || github.ref == 'refs/heads/dev') && (github.event_name == 'push'))
      run: terraform apply -auto-approve -var-file=aais_clusters.tfvars
