# This is a manual workflow, hence it must be placed in the default branch of a repository to enable and use
#Author: Rajesh Sanjeevi
#version: 1.0

name: Deploy Blockhain Network
on:
  workflow_dispatch:
    inputs:
      org_name:
        description: "ORGANIZATION NAME"
        required: true
        default: ""
      environment:
        description: "ENVIRONMENT"
        required: true
        default: ""
      role:
        description: "ROLE NAME"
        required: true
        default: ""
      channel_name:
        description: "CHANNEL NAME"
        default: ""
        required: true
      extra_vars:
        description: "EXTRA ARGUMENTS"
        default: ""
      skip_tags:
        description: "SKIP TASKS"
        default: ""

env:
  cluster_name: ${{ secrets.blk_cluster_name }}
  region: ${{ secrets.aws_region }}
  access_id: ${{ secrets.baf_user_access_key }}
  access_key: ${{ secrets.baf_user_secret_key }}
  account: ${{ secrets.aws_account_number }}
  repo_user: ${{ secrets.repo_user }}
  repo_user_token: ${{ secrets.repo_user_token }}
  repo_user_email: ${{ secrets.repo_user_email }}
  registry: ghcr.io/${{ github.actor }}/openidl-org

defaults:
  run:
    shell: bash
    working-directory: ansible-automation

jobs:
  deploy-blockchain-network:
    environment: dev-itpc
    name: deploy-blockchain-network
    runs-on: ubuntu-latest

    permissions:
      packages: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@5a4ac9002d0be2fb38bd78e4b4dbde5606d7042f

      - name: Configure AWS CLI
        uses: aws-actions/configure-aws-credentials@230d25f14e841bc8e06b5f4ff89ccd6989fc1d71
        with:
          aws-access-key-id: ${{ secrets.gitactions_user_access_key  }}
          aws-secret-access-key: ${{ secrets.gitactions_user_secret_key }}
          aws-region: ${{ secrets.aws_region }}
          role-to-assume: ${{ secrets.gitactions_eksadm_role }}
          role-external-id: ${{ secrets.gitactions_external_id }}
          role-duration-seconds: 7200 # session valid for 60 minutes
          role-session-name: git-actions

      - name: Install Ansible and dependencies
        run: |
          pip3 install openshift
          sudo apt-get install -y python3-requests-oauthlib python-yaml jq
          python -m pip install --user ansible==2.9.11

      - name: Install ansible galaxy collection for docker and k8s
        run: |
          ansible-galaxy collection install community.docker
          ansible-galaxy collection install community.kubernetes:==1.2.1

      - name: Setup kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl

      - name: Update kubeconfig and set context to blockchain cluster
        run: |
          aws eks update-kubeconfig --region ${{ env.aws_region }} --name ${{ env.cluster_name }}

      - name: Install Docker
        run: |
          pip3 install docker

      - name: Log into GitHub Docker Registry
        uses: docker/login-action@v1
        with:
          registry: ${{ env.registry }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Deploy network
        if: github.event.inputs.role == 'deploy_network'
        run: |
          ansible-playbook fabric-network.yml -i ./inventory/ansible_provisioners -e "role=${{ github.event.inputs.role }}" -e "@./${{ github.event.inputs.org_name }}-config-${{ github.event.inputs.environment }}.yml" -e "package_repo=${{ env.registry }}/openidl-baf cluster_name=${{ env.cluster_name }} region=${{ env.region }} access_id=${{ env.access_id }} access_key=${{ env.access_key }} account=${{ env.account }} repo_user=${{ env.repo_user }} repo_user_token=${{ env.repo_user_token }} repo_user_email=${{ env.repo_user_email }}"

      - name: Reset node
        if: github.event.inputs.role == 'reset'
        run: |
          ansible-playbook fabric-network.yml -i ./inventory/ansible_provisioners -e "role=${{ github.event.inputs.role }}" -e "@./${{ github.event.inputs.org_name }}-config-${{ github.event.inputs.environment }}.yml" -e "package_repo=${{ env.registry }}/openidl-baf cluster_name=${{ env.cluster_name }} region=${{ env.region }} access_id=${{ env.access_id }} access_key=${{ env.access_key }} account=${{ env.account }} repo_user=${{ env.repo_user }} repo_user_token=${{ env.repo_user_token }} repo_user_email=${{ env.repo_user_email }}"

      - name: Deploy add_new_org
        if: github.event.inputs.role == 'add_new_org' && github.event.inputs.channel_name == 'analytics-aais'
        run: |
          ansible-playbook fabric-network.yml -i ./inventory/ansible_provisioners -e "role=${{ github.event.inputs.role }}" -e "@./${{ github.event.inputs.org_name }}-config-${{ github.event.inputs.environment }}.yml" -e "channel_name=${{ github.events.inputs.channel_name }}" -e "org_json=$ORG_JSON" -e "package_repo=${{ env.registry }}/openidl-baf cluster_name=${{ env.cluster_name }} region=${{ env.region }} access_id=${{ env.access_id }} access_key=${{ env.access_key }} account=${{ env.account }} repo_user=${{ env.repo_user }} repo_user_token=${{ env.repo_user_token }} repo_user_email=${{ env.repo_user_email }}"

      - name: Deploy add_new_channel
        if: github.event.inputs.role == 'add_new_channel' && github.event.inputs.channel_name == 'analytics-aais'
        run: |
          ansible-playbook fabric-network.yml -i ./inventory/ansible_provisioners -e "role=${{ github.event.inputs.role }}" -e "@./${{ github.event.inputs.org_name }}-config-${{ github.event.inputs.environment }}.yml" -e "channel_name=${{ github.events.inputs.channel_name }}" -e "package_repo=${{ env.registry }}/openidl-baf cluster_name=${{ env.cluster_name }} region=${{ env.region }} access_id=${{ env.access_id }} access_key=${{ env.access_key }} account=${{ env.account }} repo_user=${{ env.repo_user }} repo_user_token=${{ env.repo_user_token }} repo_user_email=${{ env.repo_user_email }}"

      - name: Deploy chaincode (channel_name = "")
        if: github.event.inputs.role == 'chaincode' && github.event.inputs.channel_name == ''
        run: |
          ansible-playbook fabric-network.yml -i ./inventory/ansible_provisioners -e "role=${{ github.event.inputs.role }}" -e "@./${{ github.event.inputs.org_name }}-config-${{ github.event.inputs.environment }}.yml" -e "skip_tags=${{ github.event.inputs.skip_tags }}"-e "package_repo=${{ env.registry }}/openidl-baf cluster_name=${{ env.cluster_name }} region=${{ env.region }} access_id=${{ env.access_id }} access_key=${{ env.access_key }} account=${{ env.account }} repo_user=${{ env.repo_user }} repo_user_token=${{ env.repo_user_token }} repo_user_email=${{ env.repo_user_email }}"

      - name: Deploy chaincode (channel_name=analytics-aais)
        if: github.event.inputs.role == 'chaincode' && github.event.inputs.channel_name == 'analytics-aais'
        run: |
          ansible-playbook fabric-network.yml -i ./inventory/ansible_provisioners -e "role=${{ github.event.inputs.role }}" -e "@./${{ github.event.inputs.org_name }}-config-${{ github.event.inputs.environment }}.yml" -e "channel_name=${{ github.event.inputs.channel_name }}" -e "skip_tags=${{ github.event.inputs.skip_tags }}" -e "package_repo=${{ env.registry }}/openidl-baf cluster_name=${{ env.cluster_name }} region=${{ env.region }} access_id=${{ env.access_id }} access_key=${{ env.access_key }} account=${{ env.account }} repo_user=${{ env.repo_user }} repo_user_token=${{ env.repo_user_token }} repo_user_email=${{ env.repo_user_email }}"

      - name: Deploy vault
        if: github.event.inputs.role == 'vault'
        run: |
          ansible-playbook vault-setup.yml -i ./inventory/ansible_provisioners -e "role=${{ github.event.inputs.role }} -e "<extra key value pairs>"

