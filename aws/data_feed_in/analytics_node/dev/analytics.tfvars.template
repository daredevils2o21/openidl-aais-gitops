#1. when using github actions the below inputs are required to set as secrets in github/vault
#2. when using local terraform workspace, set these inputs in this file
aws_core_account_number = "572551282206"
aws_secondary_account_number = ["xyz"] #empty means aais carriers is going to deployed on same account of core system
aws_user_arn = "arn:aws:iam::572551282206:user/terraform_user"
aws_role_arn = "arn:aws:iam::572551282206:role/tf_automation"

#set to true when multiple aws accounts are being used. This is required to share/connect using transit gateway
other_aws_account = true
aais = false
other_aws_region = false

#aws account and region specifications
aws_region = "us-west-2"
aws_env    = "dev"

#application name
application_name = "openidl"

#-------------------------------------------------------------------------------------------------------------------
#Application cluster VPC specifications
app_vpc_cidr           = "10.30.0.0/16"
app_availability_zones = ["us-west-2a", "us-west-2b"]
app_public_subnets     = ["10.30.1.0/24", "10.30.2.0/24"]
app_private_subnets    = ["10.30.4.0/24", "10.30.5.0/24"]

#VPC Network ACL traffic rules to be configured in the VPC
#you may need to update these rules as when new networks are added
app_public_nacl_rules = {
  inbound = [{
    rule_number = 100
    rule_action = "allow"
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_block  = "0.0.0.0/0" #change this is 172.x cidr of VPC peer(open VPN)
    },
    {
    rule_number = 101
    rule_action = "allow"
    from_port   = 443
    to_port     = 443
    protocol    = "tcp"
    cidr_block  = "0.0.0.0/0"
    },
    {
      rule_number = 102
      rule_action = "allow"
      from_port   = 1024
      to_port     = 65535
      protocol    = "tcp"
      cidr_block  = "0.0.0.0/0"
  },
  {
    rule_number = 103
    rule_action = "allow"
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_block  = "0.0.0.0/0"
    },
  {
    rule_number = 104
    rule_action = "allow"
    from_port   = 8443
    to_port     = 8443
    protocol    = "tcp"
    cidr_block  = "0.0.0.0/0" #need to verify, related to EKS
    }],
  outbound = [{
    rule_number = 100
    rule_action = "allow"
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_block  = "0.0.0.0/0" #change this is 172.x cidr of VPC peer(open VPN)
    },
    {
    rule_number = 101
    rule_action = "allow"
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_block  = "0.0.0.0/0"
    },
    {
    rule_number = 102
    rule_action = "allow"
    from_port   = 443
    to_port     = 443
    protocol    = "tcp"
    cidr_block  = "0.0.0.0/0"
    },
    {
      rule_number = 103
      rule_action = "allow"
      from_port   = 32768
      to_port     = 65535
      protocol    = "tcp"
      cidr_block  = "0.0.0.0/0"
  },
  {
    rule_number = 104
    rule_action = "allow"
    from_port   = 8443
    to_port     = 8443
    protocol    = "tcp"
    cidr_block  = "0.0.0.0/0" #need to verify, related to EKS
    }]
}
app_private_nacl_rules = {
  inbound = [{
    rule_number = 100
    rule_action = "allow"
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_block  = "10.30.0.0/16"
    },
    {
    rule_number = 101
    rule_action = "allow"
    from_port   = 443
    to_port     = 443
    protocol    = "tcp"
    cidr_block  = "10.30.0.0/16"
    },
    {
    rule_number = 102
    rule_action = "allow"
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_block  = "10.30.0.0/16"
    },
    {
      rule_number = 103
      rule_action = "allow"
      from_port   = 1024
      to_port     = 65535
      protocol    = "tcp"
      cidr_block  = "0.0.0.0/0"
    },
  {
    rule_number = 104
    rule_action = "allow"
    from_port   = 8443
    to_port     = 8443
    protocol    = "tcp"
    cidr_block  = "0.0.0.0/0" #need to verify, related to EKS
    },
  {
    rule_number = 105
    rule_action = "allow"
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_block  = "10.40.0.0/16"
    }],
  outbound = [{
    rule_number = 100
    rule_action = "allow"
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_block  = "10.40.0.0/16"
    },
    {
      rule_number = 101
      rule_action = "allow"
      from_port   = 443
      to_port     = 443
      protocol    = "tcp"
      cidr_block  = "0.0.0.0/0"
    },
    {
      rule_number = 102
      rule_action = "allow"
      from_port   = 80
      to_port     = 80
      protocol    = "tcp"
      cidr_block  = "0.0.0.0/0"
    },
    {
      rule_number = 103
      rule_action = "allow"
      from_port   = 32768
      to_port     = 65535
      protocol    = "tcp"
      cidr_block  = "0.0.0.0/0"
    },
  {
    rule_number = 104
    rule_action = "allow"
    from_port   = 8443
    to_port     = 8443
    protocol    = "tcp"
    cidr_block  = "0.0.0.0/0" #need to verify, related to EKS
    },
   {
    rule_number = 105
    rule_action = "allow"
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_block  = "10.40.0.0/16"
    }]
}
#-------------------------------------------------------------------------------------------------------------------
#Blockchain cluster VPC specifications
blk_vpc_cidr           = "10.40.0.0/16"
blk_availability_zones = ["us-west-2a", "us-west-2b"]
blk_public_subnets     = ["10.40.1.0/24", "10.40.2.0/24"]
blk_private_subnets    = ["10.40.4.0/24", "10.40.5.0/24"]

#VPC Network ACL traffic rules to be configured in the VPC
#you may need to update these rules as when new networks are added
blk_public_nacl_rules = {
  inbound = [{
    rule_number = 100
    rule_action = "allow"
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_block  = "0.0.0.0/0" #change this is 172.x cidr of VPC peer(open VPN)
    },
    {
    rule_number = 101
    rule_action = "allow"
    from_port   = 443
    to_port     = 443
    protocol    = "tcp"
    cidr_block  = "0.0.0.0/0"
    },
    {
      rule_number = 102
      rule_action = "allow"
      from_port   = 1024
      to_port     = 65535
      protocol    = "tcp"
      cidr_block  = "0.0.0.0/0"
  },
  {
    rule_number = 103
    rule_action = "allow"
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_block  = "0.0.0.0/0"
    },
  {
    rule_number = 104
    rule_action = "allow"
    from_port   = 8443
    to_port     = 8443
    protocol    = "tcp"
    cidr_block  = "0.0.0.0/0" #need to verify, related to EKS
    }],
  outbound = [{
    rule_number = 100
    rule_action = "allow"
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_block  = "0.0.0.0/0" #change this is 172.x cidr of VPC peer(open VPN)
    },
    {
    rule_number = 101
    rule_action = "allow"
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_block  = "0.0.0.0/0"
    },
    {
    rule_number = 102
    rule_action = "allow"
    from_port   = 443
    to_port     = 443
    protocol    = "tcp"
    cidr_block  = "0.0.0.0/0"
    },
    {
      rule_number = 103
      rule_action = "allow"
      from_port   = 32768
      to_port     = 65535
      protocol    = "tcp"
      cidr_block  = "0.0.0.0/0"
  },
  {
    rule_number = 104
    rule_action = "allow"
    from_port   = 8443
    to_port     = 8443
    protocol    = "tcp"
    cidr_block  = "0.0.0.0/0" #need to verify, related to EKS
    }]
}
blk_private_nacl_rules = {
  inbound = [{
    rule_number = 100
    rule_action = "allow"
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_block  = "10.30.0.0/16"
    }, {
    rule_number = 101
    rule_action = "allow"
    from_port   = 443
    to_port     = 443
    protocol    = "tcp"
    cidr_block  = "10.30.0.0/16"
    },
    {
    rule_number = 102
    rule_action = "allow"
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_block  = "10.30.0.0/16"
    },
    {
      rule_number = 103
      rule_action = "allow"
      from_port   = 1024
      to_port     = 65535
      protocol    = "tcp"
      cidr_block  = "0.0.0.0/0"
    },
  {
    rule_number = 104
    rule_action = "allow"
    from_port   = 8443
    to_port     = 8443
    protocol    = "tcp"
    cidr_block  = "0.0.0.0/0" #need to verify, related to EKS
    },
  {
    rule_number = 105
    rule_action = "allow"
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_block  = "10.30.0.0/16" #need to verify, related to EKS
    }],
  outbound = [{
    rule_number = 100
    rule_action = "allow"
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_block  = "10.40.0.0/16"
    },
    {
      rule_number = 101
      rule_action = "allow"
      from_port   = 443
      to_port     = 443
      protocol    = "tcp"
      cidr_block  = "0.0.0.0/0"
    },
    {
      rule_number = 102
      rule_action = "allow"
      from_port   = 80
      to_port     = 80
      protocol    = "tcp"
      cidr_block  = "0.0.0.0/0"
    },
    {
      rule_number = 103
      rule_action = "allow"
      from_port   = 32768
      to_port     = 65535
      protocol    = "tcp"
      cidr_block  = "0.0.0.0/0"
    },
  {
    rule_number = 104
    rule_action = "allow"
    from_port   = 8443
    to_port     = 8443
    protocol    = "tcp"
    cidr_block  = "0.0.0.0/0" #need to verify, related to EKS
    },
  {
    rule_number = 105
    rule_action = "allow"
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_block  = "10.10.0.0/16"
    }]
}
#--------------------------------------------------------------------------------------------------------------------
#Default security group assigned/used when a resource is created without any security group attached
default_sg_rules = {
  ingress = [{
    cidr_blocks = "172.16.0.0/16" #update to aais vpc peer ip(openvpn)
    description = "Inbound SSH traffic"
    from_port   = "22"
    to_port     = "22"
    protocol    = "tcp"
  }],
  egress = [{
    cidr_blocks = "0.0.0.0/0"
    description = "Outbound SSH traffic"
    from_port   = "80"
    to_port     = "80"
    protocol    = "tcp"
  },
  {
    cidr_blocks = "0.0.0.0/0"
    description = "Outbound SSH traffic"
    from_port   = "443"
    to_port     = "443"
    protocol    = "tcp"
  }]
}
#--------------------------------------------------------------------------------------------------------------------
#Bastion host specifications
#application cluster bastion host specifications
app_bastion_sg_ingress =  [{rule="ssh-tcp", cidr_blocks = "0.0.0.0/0"},]
app_bastion_sg_egress =   [{rule="https-443-tcp", cidr_blocks = "0.0.0.0/0"},
                       {rule="http-80-tcp", cidr_blocks = "0.0.0.0/0"},
                       {rule="ssh-tcp", cidr_blocks = "10.30.0.0/16"}]

#blockchain cluster bastion host specifications
#bastion host security specifications
blk_bastion_sg_ingress =  [{rule="ssh-tcp", cidr_blocks = "0.0.0.0/0"},]
blk_bastion_sg_egress =   [{rule="https-443-tcp", cidr_blocks = "0.0.0.0/0"},
                       {rule="http-80-tcp", cidr_blocks = "0.0.0.0/0"},
                       {rule="ssh-tcp", cidr_blocks = "10.40.0.0/16"}]

#SSH public key to configure in bastion hosts setup in application cluster and blockchain cluster
app_bastion_ssh_key = "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDJTI6JSWyleIzZhyBY2cRj92csqiGMTtg+dFjL5OvbInBibmvDDND7DKIyUfvEITBnxKicxWzZBOxFm5HrQMQWfGrszbDT3f+g/sWrCKcwOm4wWNGf/JjTVnCP1DopFmBzAYJ+JYJ3DMTnl261SPjV9HtTtXe/xzBrJIVMAKdO6KUWmF8q7x25Gq9GmrJmoEmqv6XxAqMYS90bGqdsxTsJwjh6yU3jKyhQBazmO4aEzscaNELXM/X52zcDulYa0ulQ2hJ0B72D/TmCJAJK7qkQ77qDcpvByKnaxcl+7aVQvcRYfOv0jYDAEyZb0hT3LSkEjuBwJnsJU26urHFCEBoDXg4+lwFL/UA/ofEfZbC18LbpVTCjhxQgIyVo6f5mcp+lzRSdPeTR+RMXnwecQHJjkG9Gl76M2uPbeIMt17PExASVdb6sl16qtMmGAKlP4RqZfI/HuZkeI8mdWiap9J/HUsn+Dq9JPq88yKtR7/Vxj1XSGbmaq15sONsAmBnjPHE= rajesh.sanjeevi@T480s-12"
blk_bastion_ssh_key = "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDJTI6JSWyleIzZhyBY2cRj92csqiGMTtg+dFjL5OvbInBibmvDDND7DKIyUfvEITBnxKicxWzZBOxFm5HrQMQWfGrszbDT3f+g/sWrCKcwOm4wWNGf/JjTVnCP1DopFmBzAYJ+JYJ3DMTnl261SPjV9HtTtXe/xzBrJIVMAKdO6KUWmF8q7x25Gq9GmrJmoEmqv6XxAqMYS90bGqdsxTsJwjh6yU3jKyhQBazmO4aEzscaNELXM/X52zcDulYa0ulQ2hJ0B72D/TmCJAJK7qkQ77qDcpvByKnaxcl+7aVQvcRYfOv0jYDAEyZb0hT3LSkEjuBwJnsJU26urHFCEBoDXg4+lwFL/UA/ofEfZbC18LbpVTCjhxQgIyVo6f5mcp+lzRSdPeTR+RMXnwecQHJjkG9Gl76M2uPbeIMt17PExASVdb6sl16qtMmGAKlP4RqZfI/HuZkeI8mdWiap9J/HUsn+Dq9JPq88yKtR7/Vxj1XSGbmaq15sONsAmBnjPHE= rajesh.sanjeevi@T480s-12"

#--------------------------------------------------------------------------------------------------
#Route53 DNS domain related specifications (domain registrar: aws/others, registered: yes/no)
domain_info = {
  domain_registrar = "others", # alternate: others
  domain_name: "aaisdirect.com", #primary domain registered
  registered = "yes" #alternate: no
  sub_domain_name: "dev-openidl", #subdomain
  comments: "the aais open idl domain name resolution for app"
}
#-------------------------------------------------------------------------------------------------------------------
#Transit gateway  specifications
# routes from application cluster private subnets to other vpc private subnet cidrs (TGW route table updates)
app_tgw_routes = [{
  destination_cidr_block = "0.0.0.0/0"
  blackhole              = true #blackhole = true drops traffic for that destination cidr block
  },
  {destination_cidr_block = "10.40.0.0/16"}, {destination_cidr_block = "10.10.0.0/16"}]

#routes from blockchain cluster private subnets to other vpc private subnet cidrs (TGW route table updates)
blk_tgw_routes = [{destination_cidr_block = "10.30.0.0/16"}, {destination_cidr_block = "10.20.0.0/16"}]

#routes from application cluster private subnets to other vpc private subnet cidrs (subnet route table updates)
app_tgw_destination_cidr = ["10.40.0.0/16", "10.10.0.0/16", "10.20.0.0/16"]

#routes from blockchain cluster private subnets to other vpc private subnet cidrs (subnet route table updates)
blk_tgw_destination_cidr = ["10.30.0.0/16", "10.10.0.0/16", "10.20.0.0/16"]

transit_gateway_id = "tgw-0715849e36188ca14"
#tgw_ram_resource_share_id is only required when connecting to tgw of another aws account
tgw_ram_resource_share_id = "arn:aws:ram:us-west-2:572551282206:resource-share/7edbe4d2-a99d-4311-b62b-e9bcf26caa93"
#-------------------------------------------------------------------------------------------------------------------
#The cognito specifics are applicable only with app_cluster type
#client_application_specs
client_app_name                             = "aais-carriers-openidl-client"
client_callback_urls                        = ["https://dev-aais-carriers-openidl.aaisdirect.com/callback", "https://dev-aais-openidl.aaisdirect.com/home"]
client_default_redirect_url                 = "https://dev-aais-carriers-openidl.aaisdirect.com/home"
client_logout_urls                          = ["https://dev-aais-carriers-openidl.aaisdirect.com/logut"]
#domain specs
cognito_domain = "dev-aais-carriers-openidl-aaisdirect"
#acm_cert_arn = "" #used for custom domain
#user pool specs
userpool_name                = "aais-carriers-openidl-userpool"
#--------------------------------------------------------------------------------------------------------------------
#traffic rules to be opened for the internal application load balancer in the blockchain cluster
blk_eks_alb_sg_ingress = [{
      from_port   = 443
      to_port     = 443
      protocol    = "tcp"
      description = "inbound traffic to internal elb in blockchain cluster"
      cidr_blocks = "10.30.0.0/16"
    },
    {
      from_port   = 443
      to_port     = 443
      protocol    = "tcp"
      description = "inbound traffic to internal elb in blockchain cluster"
      cidr_blocks = "10.40.0.0/16"
    },
{
      from_port   = 443
      to_port     = 443
      protocol    = "tcp"
      description = "inbound traffic to internal elb in blockchain cluster"
      cidr_blocks = "10.10.0.0/16"
    },
    {
      from_port   = 443
      to_port     = 443
      protocol    = "tcp"
      description = "inbound traffic to internal elb in blockchain cluster"
      cidr_blocks = "10.20.0.0/16"
    }]
blk_eks_alb_sg_egress  = [{
      rule = "all-all"
    }]
#--------------------------------------------------------------------------------------------------------------------
#S3 bucket specifications
s3_bucket_name = "my-demo-aais-bucket-openidl"
#--------------------------------------------------------------------------------------------------------------------
#EKS Cluster specifications
#app specific cluster names etc.
#blk specific cluster names etc.
app_eks_sg                   = "app_eks_sg"
cluster_version              = "1.19"

#Kubernetes dashboard
cluster_name = "demo"
create_namespace  = true
namespace  = "kubernetes-dashboard"
dashboard_subdomain = ""
domain = "localhost"


