#The following inputs should be via git secrets as they contain sensitive data. refer to README.md
aws_account_number = ""
aws_access_key = ""
aws_secret_key = ""
aws_user_arn = ""
aws_role_arn = ""
aws_region = ""
aws_external_id = ""
aws_env = "<dev/test/prod>"
app_bastion_ssh_key = ""
blk_bastion_ssh_key = ""
app_eks_worker_nodes_ssh_key = ""
blk_eks_worker_nodes_ssh_key = ""

ses_email_identity = "" #email address configured in aws SES service
userpool_email_source_arn ="" #arn of the email address configured in aws SES service

#List of iam users and their relevant groups mapping in EKS for its access
app_cluster_map_users = ["<userarn>","<userarn>"]
app_cluster_map_roles = ["<rolearn>","<rolearn>"]

List of iam roles and their relevant group mapping in EKS for its access
blk_cluster_map_users = ["<userarn>","<userarn>"]
blk_cluster_map_roles = ["<rolearn>","<rolearn>"]

#end of sensitive data that goes to git secrets

#set to different node types like aais, carrier, analytics etc. Prefer 4 letter representation only.
#example: aais/carr/anlt etc.,
node_type = true #for carrier nodes set to false

#--------------------------------------------------------------------------------------------------------------------
#Application cluster VPC specifications
app_vpc_cidr           = "<appvpc_cidr>"
app_availability_zones = ["", ""]
app_public_subnets     = ["", ""]
app_private_subnets    = ["", ""]

#VPC Network ACL traffic rules to be configured in the VPC
#you may need to update these rules as when new networks are added
app_public_nacl_rules = {
  inbound = [{
    rule_number = 100
    rule_action = "allow"
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_block  = "<cidr allowed to ssh>"
    },
    {
    rule_number = 101
    rule_action = "allow"
    from_port   = 443
    to_port     = 443
    protocol    = "tcp"
    cidr_block  = "0.0.0.0/0"
    },
    {
      rule_number = 102
      rule_action = "allow"
      from_port   = 1024
      to_port     = 65535
      protocol    = "tcp"
      cidr_block  = "0.0.0.0/0"
  },
  {
    rule_number = 103
    rule_action = "allow"
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_block  = "0.0.0.0/0"
    },
  {
    rule_number = 104
    rule_action = "allow"
    from_port   = 8443
    to_port     = 8443
    protocol    = "tcp"
    cidr_block  = "0.0.0.0/0" #related to eks
    }],
  outbound = [{
    rule_number = 100
    rule_action = "allow"
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_block  = "<cidr allowed to ssh>"
    },
    {
    rule_number = 101
    rule_action = "allow"
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_block  = "0.0.0.0/0"
    },
    {
    rule_number = 102
    rule_action = "allow"
    from_port   = 443
    to_port     = 443
    protocol    = "tcp"
    cidr_block  = "0.0.0.0/0"
    },
    {
      rule_number = 103
      rule_action = "allow"
      from_port   = 32768
      to_port     = 65535
      protocol    = "tcp"
      cidr_block  = "0.0.0.0/0"
  },
  {
    rule_number = 104
    rule_action = "allow"
    from_port   = 8443
    to_port     = 8443
    protocol    = "tcp"
    cidr_block  = "0.0.0.0/0" #related to eks
    }]
}
app_private_nacl_rules = {
  inbound = [{
    rule_number = 100
    rule_action = "allow"
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_block  = "<appvpc_cidr>"
    },
    {
    rule_number = 101
    rule_action = "allow"
    from_port   = 443
    to_port     = 443
    protocol    = "tcp"
    cidr_block  = "<appvpc_cidr>"
    },
    {
    rule_number = 102
    rule_action = "allow"
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_block  = "<appvpc_cidr>"
    },
    {
      rule_number = 103
      rule_action = "allow"
      from_port   = 1024
      to_port     = 65535
      protocol    = "tcp"
      cidr_block  = "0.0.0.0/0" #related to eks
    },
  {
    rule_number = 104
    rule_action = "allow"
    from_port   = 8443
    to_port     = 8443
    protocol    = "tcp"
    cidr_block  = "0.0.0.0/0" #related to eks
    }],
  outbound = [{
    rule_number = 100
    rule_action = "allow"
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_block  = "<appvpc_idr>"
    },
    {
      rule_number = 101
      rule_action = "allow"
      from_port   = 443
      to_port     = 443
      protocol    = "tcp"
      cidr_block  = "0.0.0.0/0"
    },
    {
      rule_number = 102
      rule_action = "allow"
      from_port   = 80
      to_port     = 80
      protocol    = "tcp"
      cidr_block  = "0.0.0.0/0"
    },
    {
      rule_number = 103
      rule_action = "allow"
      from_port   = 32768
      to_port     = 65535
      protocol    = "tcp"
      cidr_block  = "0.0.0.0/0"
    },
  {
    rule_number = 104
    rule_action = "allow"
    from_port   = 8443
    to_port     = 8443
    protocol    = "tcp"
    cidr_block  = "0.0.0.0/0" #related to eks
    }]
}
#-------------------------------------------------------------------------------------------------------------------

#Blockchain cluster VPC specifications
blk_vpc_cidr           = "<blkvpccidr>"
blk_availability_zones = ["", ""]
blk_public_subnets     = ["", ""]
blk_private_subnets    = ["", ""]

#VPC Network ACL traffic rules to be configured in the VPC
#you may need to update these rules as when new networks are added
blk_public_nacl_rules = {
  inbound = [{
    rule_number = 100
    rule_action = "allow"
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_block  = "<cidr allowed ssh access>"
    },
    {
    rule_number = 101
    rule_action = "allow"
    from_port   = 443
    to_port     = 443
    protocol    = "tcp"
    cidr_block  = "0.0.0.0/0"
    },
    {
      rule_number = 102
      rule_action = "allow"
      from_port   = 1024
      to_port     = 65535
      protocol    = "tcp"
      cidr_block  = "0.0.0.0/0"
  },
  {
    rule_number = 103
    rule_action = "allow"
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_block  = "0.0.0.0/0"
    },
  {
    rule_number = 104
    rule_action = "allow"
    from_port   = 8443
    to_port     = 8443
    protocol    = "tcp"
    cidr_block  = "0.0.0.0/0" #related to eks
    }],
  outbound = [{
    rule_number = 100
    rule_action = "allow"
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_block  = "<cidr allowed ssh access>"
    },
    {
    rule_number = 101
    rule_action = "allow"
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_block  = "0.0.0.0/0"
    },
    {
    rule_number = 102
    rule_action = "allow"
    from_port   = 443
    to_port     = 443
    protocol    = "tcp"
    cidr_block  = "0.0.0.0/0"
    },
    {
      rule_number = 103
      rule_action = "allow"
      from_port   = 32768
      to_port     = 65535
      protocol    = "tcp"
      cidr_block  = "0.0.0.0/0"
  },
  {
    rule_number = 104
    rule_action = "allow"
    from_port   = 8443
    to_port     = 8443
    protocol    = "tcp"
    cidr_block  = "0.0.0.0/0" #related to eks
    }]
}
blk_private_nacl_rules = {
  inbound = [{
    rule_number = 100
    rule_action = "allow"
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_block  = "<blkvpc_cidr>"
    }, {
    rule_number = 101
    rule_action = "allow"
    from_port   = 443
    to_port     = 443
    protocol    = "tcp"
    cidr_block  = "<blkvpc_cidr>"
    },
    {
    rule_number = 102
    rule_action = "allow"
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_block  = "<blkvpc_cidr>"
    },
    {
      rule_number = 103
      rule_action = "allow"
      from_port   = 1024
      to_port     = 65535
      protocol    = "tcp"
      cidr_block  = "0.0.0.0/0" #related to eks
    },
  {
    rule_number = 104
    rule_action = "allow"
    from_port   = 8443
    to_port     = 8443
    protocol    = "tcp"
    cidr_block  = "0.0.0.0/0" #related to eks
    }],
  outbound = [{
    rule_number = 100
    rule_action = "allow"
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_block  = "<blkvpc_cidr>"
    },
    {
      rule_number = 101
      rule_action = "allow"
      from_port   = 443
      to_port     = 443
      protocol    = "tcp"
      cidr_block  = "0.0.0.0/0"
    },
    {
      rule_number = 102
      rule_action = "allow"
      from_port   = 80
      to_port     = 80
      protocol    = "tcp"
      cidr_block  = "0.0.0.0/0"
    },
    {
      rule_number = 103
      rule_action = "allow"
      from_port   = 32768
      to_port     = 65535
      protocol    = "tcp"
      cidr_block  = "0.0.0.0/0"
    },
  {
    rule_number = 104
    rule_action = "allow"
    from_port   = 8443
    to_port     = 8443
    protocol    = "tcp"
    cidr_block  = "0.0.0.0/0" #related to eks
    }]
}
#--------------------------------------------------------------------------------------------------------------------

#Default security group assigned/used when a resource is created without any security group attached
default_sg_rules = {
  ingress = [{
    cidr_blocks = "<cidr-used-to-ssh>" #update to aais vpc peer ip(openvpn)
    description = "Inbound SSH traffic"
    from_port   = "22"
    to_port     = "22"
    protocol    = "tcp"
  }],
  egress = [{
    cidr_blocks = "0.0.0.0/0"
    description = "Outbound SSH traffic"
    from_port   = "80"
    to_port     = "80"
    protocol    = "tcp"
  },
  {
    cidr_blocks = "0.0.0.0/0"
    description = "Outbound SSH traffic"
    from_port   = "443"
    to_port     = "443"
    protocol    = "tcp"
  }]
}
#--------------------------------------------------------------------------------------------------------------------

#Bastion host specifications
#application cluster bastion host specifications
app_bastion_sg_ingress =  [{rule="ssh-tcp", cidr_blocks = "<cidr_allowed_to_ssh>"},]
app_bastion_sg_egress =   [{rule="https-443-tcp", cidr_blocks = "0.0.0.0/0"},
                       {rule="http-80-tcp", cidr_blocks = "0.0.0.0/0"},
                       {rule="ssh-tcp", cidr_blocks = "<cidr_allowed_to_ssh>"}]

#blockchain cluster bastion host specifications
#bastion host security specifications
blk_bastion_sg_ingress =  [{rule="ssh-tcp", cidr_blocks = "<cidr_allowed_to_ssh>>"},]
blk_bastion_sg_egress =   [{rule="https-443-tcp", cidr_blocks = "0.0.0.0/0"},
                       {rule="http-80-tcp", cidr_blocks = "0.0.0.0/0"},
                       {rule="ssh-tcp", cidr_blocks = "<cidr_allowed_to_ssh>"}]

#--------------------------------------------------------------------------------------------------------------------

#Route53 (PUBLIC) DNS domain related specifications (domain registrar: aws/others, registered: yes/no)
domain_info = {
  domain_registrar = "others", # alternate option: aws
  domain_name: "", #primary domain registered
  registered = "" #registered already: yes, otherwise: no
  app_sub_domain_name: "<subdomain_name>" , #subdomain mapped to app eks nlb
  blk_sub_domain_names: ["",""] #list of subdomain names mapped to blk eks nlb
  comments: "<comments>"
}
#Route53 (PRIVATE) DNS resolution related specifications
#internal name resolution required for blockchain vpc NLB
internal_domain = "" #internal domain name for internal name resolution within vpcs
internal_subdomain = ["", "",] #list of subdomains for internal resolution within vpcs

#-------------------------------------------------------------------------------------------------------------------

#Transit gateway  specifications
tgw_amazon_side_asn = "<amazon_side_asn>" #default is 64532.
# routes from application cluster private subnets to other vpc private subnet cidrs (TGW route table updates)
app_tgw_routes = [{destination_cidr_block = "<blkvpc_cidr>"}]

#routes from blockchain cluster private subnets to other vpc private subnet cidrs (TGW route table updates)
blk_tgw_routes = [{destination_cidr_block = "<appvpc_cidr>"}]

#routes from application cluster private subnets to other vpc private subnet cidrs (subnet route table updates)
app_tgw_destination_cidr = ["<blkvpc_cidr>"]

#routes from blockchain cluster private subnets to other vpc private subnet cidrs (subnet route table updates)
blk_tgw_destination_cidr = ["<appvpc_cidr>"]

#--------------------------------------------------------------------------------------------------------------------

#Cognito specifications
userpool_name                = ""
client_app_name              = ""
client_callback_urls         = ["", ""]
client_default_redirect_url  = ""
client_logout_urls           = [""]
cognito_domain               = ""
#--------------------------------------------------------------------------------------------------------------------

#application specific traffic to be allowed in app cluster worker nodes
app_eks_workers_app_sg_ingress = [] #for input format refer to blk_eks_nlb_sg_ingress input
app_eks_workers_app_sg_egress = [] #for input format refer to blk_eks_nlb_sg_egress input

#application specific traffic to be allowed in blk cluster worker nodes
blk_eks_workers_app_sg_ingress = [] #for input format refer to blk_eks_nlb_sg_ingress input
blk_eks_workers_app_sg_egress = [] #for input format refer to blk_eks_nlb_sg_egress input
#--------------------------------------------------------------------------------------------------------------------

# application cluster EKS specifications
app_cluster_name              = ""
app_cluster_version           = ""
app_cluster_service_ipv4_cidr = ""
#--------------------------------------------------------------------------------------------------------------------

# blockchain cluster EKS specifications
blk_cluster_name              = ""
blk_cluster_version           = ""
blk_cluster_service_ipv4_cidr = ""
#--------------------------------------------------------------------------------------------------------------------
